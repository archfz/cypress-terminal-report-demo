{
  "stats": {
    "suites": 1,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2024-01-24T10:47:32.258Z",
    "end": "2024-01-24T10:47:48.112Z",
    "duration": 15854,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ab38b4ed-206f-4b9b-a2ac-55de64bd585b",
      "title": "",
      "fullFile": "cypress/integration/actions.cy.ts",
      "file": "cypress/integration/actions.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "afa254ea-d9d4-40dd-9771-2193a2603b72",
          "title": "Actions",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".type() - type into a DOM element",
              "fullTitle": "Actions .type() - type into a DOM element",
              "timedOut": null,
              "duration": 3971,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      []\n    ]\n  },\n  \"        cy:command (K): visit\\thttps://example.cypress.io/commands/actions\\n        cy:command (K): get\\t.action-email\\n        cy:command (K): type\\tfake@email.com\\n        cy:command (K): assert\\texpected **<input#email1.form-control.action-email>** to have value **fake@email.com**\\n                        Actual: \\t\\\"fake@email.com\\\"\\n                        Expected: \\t\\\"fake@email.com\\\"\\n        cy:command (K): type\\t{leftarrow}{rightarrow}{uparrow}{downarrow}\\n        cy:command (K): type\\t{del}{selectall}{backspace}\\n        cy:command (K): type\\t{alt}{option}\\n        cy:command (K): type\\t{ctrl}{control}\\n        cy:command (K): type\\t{meta}{command}{cmd}\\n        cy:command (K): type\\t{shift}\\n        cy:command (K): type\\tslow.typing@email.com, {delay: 100}\\n        cy:command (K): assert\\texpected **<input#email1.form-control.action-email>** to have value **slow.typing@email.com**\\n                        Actual: \\t\\\"slow.typing@email.com\\\"\\n                        Expected: \\t\\\"slow.typing@email.com\\\"\\n        cy:command (K): get\\t.action-disabled\\n        cy:command (K): type\\tdisabled error checking, {force: true}\\n        cy:command (K): assert\\texpected **<textarea.form-control.action-disabled>** to have value **disabled error checking**\\n                        Actual: \\t\\\"disabled error checking\\\"\\n                        Expected: \\t\\\"disabled error checking\\\"\\n\"\n]",
              "code": "// https://on.cypress.io/type\ncy.get('.action-email')\n    .type('fake@email.com').should('have.value', 'fake@email.com')\n    // .type() with special character sequences\n    .type('{leftarrow}{rightarrow}{uparrow}{downarrow}')\n    .type('{del}{selectall}{backspace}')\n    // .type() with key modifiers\n    .type('{alt}{option}') //these are equivalent\n    .type('{ctrl}{control}') //these are equivalent\n    .type('{meta}{command}{cmd}') //these are equivalent\n    .type('{shift}')\n    // Delay each keypress by 0.1 sec\n    .type('slow.typing@email.com', { delay: 100 })\n    .should('have.value', 'slow.typing@email.com');\ncy.get('.action-disabled')\n    // Ignore error checking prior to type\n    // like whether the input is visible or disabled\n    .type('disabled error checking', { force: true })\n    .should('have.value', 'disabled error checking');",
              "err": {},
              "uuid": "cec31abc-d785-4289-8adc-d4379860f126",
              "parentUUID": "afa254ea-d9d4-40dd-9771-2193a2603b72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".focus() - focus on a DOM element",
              "fullTitle": "Actions .focus() - focus on a DOM element",
              "timedOut": null,
              "duration": 114,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      []\n    ]\n  },\n  \"        cy:command (K): visit\\thttps://example.cypress.io/commands/actions\\n        cy:command (K): get\\t.action-focus\\n        cy:command (K): focus\\n        cy:command (K): assert\\texpected **<input#password1.form-control.action-focus.focus>** to have class **focus**\\n        cy:command (K): prev\\n        cy:command (K): assert\\texpected **<label>** to have attribute **style** with the value **color: orange;**\\n                        Actual: \\t\\\"color: orange;\\\"\\n                        Expected: \\t\\\"color: orange;\\\"\\n\"\n]",
              "code": "// https://on.cypress.io/focus\ncy.get('.action-focus').focus()\n    .should('have.class', 'focus')\n    .prev().should('have.attr', 'style', 'color: orange;');",
              "err": {},
              "uuid": "0cdeb7be-37a8-4332-8bd4-d5f0bd884c58",
              "parentUUID": "afa254ea-d9d4-40dd-9771-2193a2603b72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".blur() - blur off a DOM element",
              "fullTitle": "Actions .blur() - blur off a DOM element",
              "timedOut": null,
              "duration": 418,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      []\n    ]\n  },\n  \"        cy:command (K): visit\\thttps://example.cypress.io/commands/actions\\n        cy:command (K): get\\t.action-blur\\n        cy:command (K): type\\tAbout to blur\\n        cy:command (K): blur\\n        cy:command (K): assert\\texpected **<input#fullName1.form-control.action-blur.error>** to have class **error**\\n        cy:command (K): prev\\n        cy:command (K): assert\\texpected **<label>** to have attribute **style** with the value **color: red;**\\n                        Actual: \\t\\\"color: red;\\\"\\n                        Expected: \\t\\\"color: red;\\\"\\n\"\n]",
              "code": "// https://on.cypress.io/blur\ncy.get('.action-blur').type('About to blur').blur()\n    .should('have.class', 'error')\n    .prev().should('have.attr', 'style', 'color: red;');",
              "err": {},
              "uuid": "71ac6629-c104-4342-b156-ef6c350b5b1e",
              "parentUUID": "afa254ea-d9d4-40dd-9771-2193a2603b72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".clear() - clears an input or textarea element",
              "fullTitle": "Actions .clear() - clears an input or textarea element",
              "timedOut": null,
              "duration": 589,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      []\n    ]\n  },\n  \"        cy:command (K): visit\\thttps://example.cypress.io/commands/actions\\n        cy:command (K): get\\t.action-clear\\n        cy:command (K): type\\tClear this text\\n        cy:command (K): assert\\texpected **<input#description.form-control.action-clear>** to have value **Clear this text**\\n                        Actual: \\t\\\"Clear this text\\\"\\n                        Expected: \\t\\\"Clear this text\\\"\\n        cy:command (K): clear\\n        cy:command (K): assert\\texpected **<input#description.form-control.action-clear>** to have value **''**\\n\"\n]",
              "code": "// https://on.cypress.io/clear\ncy.get('.action-clear').type('Clear this text')\n    .should('have.value', 'Clear this text')\n    .clear()\n    .should('have.value', '');",
              "err": {},
              "uuid": "a606ef93-70a7-48cb-9061-ca9a134c95f2",
              "parentUUID": "afa254ea-d9d4-40dd-9771-2193a2603b72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".submit() - submit a form",
              "fullTitle": "Actions .submit() - submit a form",
              "timedOut": null,
              "duration": 411,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      []\n    ]\n  },\n  \"        cy:command (K): visit\\thttps://example.cypress.io/commands/actions\\n        cy:command (K): get\\t.action-form\\n        cy:command (K): find\\t[type=\\\"text\\\"]\\n        cy:command (K): type\\tHALFOFF\\n        cy:command (K): get\\t.action-form\\n        cy:command (K): submit\\n        cy:command (K): next\\n        cy:command (K): assert\\texpected **<p>** to contain **Your form has been submitted!**\\n\"\n]",
              "code": "// https://on.cypress.io/submit\ncy.get('.action-form')\n    .find('[type=\"text\"]').type('HALFOFF');\ncy.get('.action-form').submit()\n    .next().should('contain', 'Your form has been submitted!');",
              "err": {},
              "uuid": "56800fac-6849-45c1-b9ff-61f00a87013d",
              "parentUUID": "afa254ea-d9d4-40dd-9771-2193a2603b72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".click() - click on a DOM element",
              "fullTitle": "Actions .click() - click on a DOM element",
              "timedOut": null,
              "duration": 2160,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      []\n    ]\n  },\n  \"        cy:command (K): visit\\thttps://example.cypress.io/commands/actions\\n        cy:command (K): get\\t.action-btn\\n        cy:command (K): click\\n        cy:command (K): get\\t#action-canvas\\n        cy:command (K): click\\n        cy:command (K): get\\t#action-canvas\\n        cy:command (K): click\\ttopLeft\\n        cy:command (K): get\\t#action-canvas\\n        cy:command (K): click\\ttop\\n        cy:command (K): get\\t#action-canvas\\n        cy:command (K): click\\ttopRight\\n        cy:command (K): get\\t#action-canvas\\n        cy:command (K): click\\tleft\\n        cy:command (K): get\\t#action-canvas\\n        cy:command (K): click\\tright\\n        cy:command (K): get\\t#action-canvas\\n        cy:command (K): click\\tbottomLeft\\n        cy:command (K): get\\t#action-canvas\\n        cy:command (K): click\\tbottom\\n        cy:command (K): get\\t#action-canvas\\n        cy:command (K): click\\tbottomRight\\n        cy:command (K): get\\t#action-canvas\\n        cy:command (K): click\\t80, 75\\n        cy:command (K): click\\t170, 75\\n        cy:command (K): click\\t80, 165\\n        cy:command (K): click\\t100, 185\\n        cy:command (K): click\\t125, 190\\n        cy:command (K): click\\t150, 185\\n        cy:command (K): click\\t170, 165\\n        cy:command (K): get\\t.action-labels>.label\\n        cy:command (K): click\\t{multiple: true}\\n        cy:command (K): click\\t{multiple: true}\\n        cy:command (K): click\\t{multiple: true}\\n        cy:command (K): click\\t{multiple: true}\\n        cy:command (K): click\\t{multiple: true}\\n        cy:command (K): click\\t{multiple: true}\\n        cy:command (K): get\\t.action-opacity>.btn\\n        cy:command (K): click\\t{force: true}\\n\"\n]",
              "code": "// https://on.cypress.io/click\ncy.get('.action-btn').click();\n// You can click on 9 specific positions of an element:\n//  -----------------------------------\n// | topLeft        top       topRight |\n// |                                   |\n// |                                   |\n// |                                   |\n// | left          center        right |\n// |                                   |\n// |                                   |\n// |                                   |\n// | bottomLeft   bottom   bottomRight |\n//  -----------------------------------\n// clicking in the center of the element is the default\ncy.get('#action-canvas').click();\ncy.get('#action-canvas').click('topLeft');\ncy.get('#action-canvas').click('top');\ncy.get('#action-canvas').click('topRight');\ncy.get('#action-canvas').click('left');\ncy.get('#action-canvas').click('right');\ncy.get('#action-canvas').click('bottomLeft');\ncy.get('#action-canvas').click('bottom');\ncy.get('#action-canvas').click('bottomRight');\n// .click() accepts an x and y coordinate\n// that controls where the click occurs :)\ncy.get('#action-canvas')\n    .click(80, 75) // click 80px on x coord and 75px on y coord\n    .click(170, 75)\n    .click(80, 165)\n    .click(100, 185)\n    .click(125, 190)\n    .click(150, 185)\n    .click(170, 165);\n// click multiple elements by passing multiple: true\ncy.get('.action-labels>.label').click({ multiple: true });\n// Ignore error checking prior to clicking\ncy.get('.action-opacity>.btn').click({ force: true });",
              "err": {},
              "uuid": "3bae92a1-9b73-4f8c-bd30-b7f839967170",
              "parentUUID": "afa254ea-d9d4-40dd-9771-2193a2603b72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".dblclick() - double click on a DOM element",
              "fullTitle": "Actions .dblclick() - double click on a DOM element",
              "timedOut": null,
              "duration": 202,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      []\n    ]\n  },\n  \"        cy:command (K): visit\\thttps://example.cypress.io/commands/actions\\n        cy:command (K): get\\t.action-div\\n        cy:command (K): dblclick\\n        cy:command (K): assert\\texpected **<div.action-div.hidden>** not to be **visible**\\n        cy:command (K): get\\t.action-input-hidden\\n        cy:command (K): assert\\texpected **<input.action-input-hidden.form-control>** to be **visible**\\n\"\n]",
              "code": "// https://on.cypress.io/dblclick\n// Our app has a listener on 'dblclick' event in our 'scripts.js'\n// that hides the div and shows an input on double click\ncy.get('.action-div').dblclick().should('not.be.visible');\ncy.get('.action-input-hidden').should('be.visible');",
              "err": {},
              "uuid": "edb0356c-ccc1-45a0-b43a-537089861a50",
              "parentUUID": "afa254ea-d9d4-40dd-9771-2193a2603b72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".rightclick() - right click on a DOM element",
              "fullTitle": "Actions .rightclick() - right click on a DOM element",
              "timedOut": null,
              "duration": 182,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      []\n    ]\n  },\n  \"        cy:command (K): visit\\thttps://example.cypress.io/commands/actions\\n        cy:command (K): get\\t.rightclick-action-div\\n        cy:command (K): rightclick\\n        cy:command (K): assert\\texpected **<div.rightclick-action-div.hidden>** not to be **visible**\\n        cy:command (K): get\\t.rightclick-action-input-hidden\\n        cy:command (K): assert\\texpected **<input.rightclick-action-input-hidden.form-control>** to be **visible**\\n\"\n]",
              "code": "// https://on.cypress.io/rightclick\n// Our app has a listener on 'contextmenu' event in our 'scripts.js'\n// that hides the div and shows an input on right click\ncy.get('.rightclick-action-div').rightclick().should('not.be.visible');\ncy.get('.rightclick-action-input-hidden').should('be.visible');",
              "err": {},
              "uuid": "7edb22aa-867a-477e-9943-1260d943ab1e",
              "parentUUID": "afa254ea-d9d4-40dd-9771-2193a2603b72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".check() - check a checkbox or radio element",
              "fullTitle": "Actions .check() - check a checkbox or radio element",
              "timedOut": null,
              "duration": 903,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      []\n    ]\n  },\n  \"        cy:command (K): visit\\thttps://example.cypress.io/commands/actions\\n        cy:command (K): get\\t.action-checkboxes [type=\\\"checkbox\\\"]\\n        cy:command (K): not\\t[disabled]\\n        cy:command (K): check\\n        cy:command (K): check\\n        cy:command (K): assert\\texpected **[ <input>, 1 more... ]** to be **checked**\\n        cy:command (K): get\\t.action-radios [type=\\\"radio\\\"]\\n        cy:command (K): not\\t[disabled]\\n        cy:command (K): check\\n        cy:command (K): check\\n        cy:command (K): assert\\texpected **[ <input#optionsRadios1>, 1 more... ]** to be **checked**\\n        cy:command (K): get\\t.action-radios [type=\\\"radio\\\"]\\n        cy:command (K): check\\tradio1\\n        cy:command (K): assert\\texpected **<input#optionsRadios1>** to be **checked**\\n        cy:command (K): get\\t.action-multiple-checkboxes [type=\\\"checkbox\\\"]\\n        cy:command (K): check\\t[checkbox1, checkbox2]\\n        cy:command (K): check\\t[checkbox1, checkbox2]\\n        cy:command (K): assert\\texpected **[ <input>, 1 more... ]** to be **checked**\\n        cy:command (K): get\\t.action-checkboxes [disabled]\\n        cy:command (K): check\\t{force: true}\\n        cy:command (K): assert\\texpected **<input>** to be **checked**\\n        cy:command (K): get\\t.action-radios [type=\\\"radio\\\"]\\n        cy:command (K): check\\t{force: true}\\n        cy:command (K): assert\\texpected **<input#optionsRadios3>** to be **checked**\\n\"\n]",
              "code": "// https://on.cypress.io/check\n// By default, .check() will check all\n// matching checkbox or radio elements in succession, one after another\ncy.get('.action-checkboxes [type=\"checkbox\"]').not('[disabled]')\n    .check().should('be.checked');\ncy.get('.action-radios [type=\"radio\"]').not('[disabled]')\n    .check().should('be.checked');\n// .check() accepts a value argument\ncy.get('.action-radios [type=\"radio\"]')\n    .check('radio1').should('be.checked');\n// .check() accepts an array of values\ncy.get('.action-multiple-checkboxes [type=\"checkbox\"]')\n    .check(['checkbox1', 'checkbox2']).should('be.checked');\n// Ignore error checking prior to checking\ncy.get('.action-checkboxes [disabled]')\n    .check({ force: true }).should('be.checked');\ncy.get('.action-radios [type=\"radio\"]')\n    .check('radio3', { force: true }).should('be.checked');",
              "err": {},
              "uuid": "2f6369f2-8ad9-4043-b8c0-5ffa850849e1",
              "parentUUID": "afa254ea-d9d4-40dd-9771-2193a2603b72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".uncheck() - uncheck a checkbox element",
              "fullTitle": "Actions .uncheck() - uncheck a checkbox element",
              "timedOut": null,
              "duration": 847,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      []\n    ]\n  },\n  \"        cy:command (K): visit\\thttps://example.cypress.io/commands/actions\\n        cy:command (K): get\\t.action-check [type=\\\"checkbox\\\"]\\n        cy:command (K): not\\t[disabled]\\n        cy:command (K): uncheck\\n        cy:command (K): uncheck\\n        cy:command (K): assert\\texpected **[ <input>, 1 more... ]** not to be **checked**\\n        cy:command (K): get\\t.action-check [type=\\\"checkbox\\\"]\\n        cy:command (K): check\\tcheckbox1\\n        cy:command (K): uncheck\\tcheckbox1\\n        cy:command (K): assert\\texpected **<input>** not to be **checked**\\n        cy:command (K): get\\t.action-check [type=\\\"checkbox\\\"]\\n        cy:command (K): check\\t[checkbox1, checkbox3]\\n        cy:command (K): check\\t[checkbox1, checkbox3]\\n        cy:command (K): uncheck\\t[checkbox1, checkbox3]\\n        cy:command (K): uncheck\\t[checkbox1, checkbox3]\\n        cy:command (K): assert\\texpected **[ <input>, 1 more... ]** not to be **checked**\\n        cy:command (K): get\\t.action-check [disabled]\\n        cy:command (K): uncheck\\t{force: true}\\n        cy:command (K): assert\\texpected **<input>** not to be **checked**\\n\"\n]",
              "code": "// https://on.cypress.io/uncheck\n// By default, .uncheck() will uncheck all matching\n// checkbox elements in succession, one after another\ncy.get('.action-check [type=\"checkbox\"]')\n    .not('[disabled]')\n    .uncheck().should('not.be.checked');\n// .uncheck() accepts a value argument\ncy.get('.action-check [type=\"checkbox\"]')\n    .check('checkbox1')\n    .uncheck('checkbox1').should('not.be.checked');\n// .uncheck() accepts an array of values\ncy.get('.action-check [type=\"checkbox\"]')\n    .check(['checkbox1', 'checkbox3'])\n    .uncheck(['checkbox1', 'checkbox3']).should('not.be.checked');\n// Ignore error checking prior to unchecking\ncy.get('.action-check [disabled]')\n    .uncheck({ force: true }).should('not.be.checked');",
              "err": {},
              "uuid": "40f7cf2e-95bd-4542-af24-b9748cc5171c",
              "parentUUID": "afa254ea-d9d4-40dd-9771-2193a2603b72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".select() - select an option in a <select> element",
              "fullTitle": "Actions .select() - select an option in a <select> element",
              "timedOut": null,
              "duration": 960,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      []\n    ]\n  },\n  \"        cy:command (K): visit\\thttps://example.cypress.io/commands/actions\\n        cy:command (K): get\\t.action-select\\n        cy:command (K): assert\\texpected **<select.form-control.action-select>** to have value **--Select a fruit--**\\n                        Actual: \\t\\\"--Select a fruit--\\\"\\n                        Expected: \\t\\\"--Select a fruit--\\\"\\n        cy:command (K): get\\t.action-select\\n        cy:command (K): select\\tapples\\n        cy:command (K): get\\t.action-select\\n        cy:command (K): assert\\texpected **<select.form-control.action-select>** to have value **fr-apples**\\n                        Actual: \\t\\\"fr-apples\\\"\\n                        Expected: \\t\\\"fr-apples\\\"\\n        cy:command (K): get\\t.action-select-multiple\\n        cy:command (K): select\\t[apples, oranges, bananas]\\n        cy:command (K): invoke\\t.val()\\n        cy:command (K): assert\\texpected **[ Array(3) ]** to deeply equal **[ Array(3) ]**\\n                        Actual: \\t[\\\"fr-apples\\\",\\\"fr-oranges\\\",\\\"fr-bananas\\\"]\\n                        Expected: \\t[\\\"fr-apples\\\",\\\"fr-oranges\\\",\\\"fr-bananas\\\"]\\n        cy:command (K): get\\t.action-select\\n        cy:command (K): select\\tfr-bananas\\n        cy:command (K): assert\\texpected **<select.form-control.action-select>** to have value **fr-bananas**\\n                        Actual: \\t\\\"fr-bananas\\\"\\n                        Expected: \\t\\\"fr-bananas\\\"\\n        cy:command (K): get\\t.action-select-multiple\\n        cy:command (K): select\\t[fr-apples, fr-oranges, fr-bananas]\\n        cy:command (K): invoke\\t.val()\\n        cy:command (K): assert\\texpected **[ Array(3) ]** to deeply equal **[ Array(3) ]**\\n                        Actual: \\t[\\\"fr-apples\\\",\\\"fr-oranges\\\",\\\"fr-bananas\\\"]\\n                        Expected: \\t[\\\"fr-apples\\\",\\\"fr-oranges\\\",\\\"fr-bananas\\\"]\\n        cy:command (K): get\\t.action-select-multiple\\n        cy:command (K): invoke\\t.val()\\n        cy:command (K): assert\\texpected **[ Array(3) ]** to include **fr-oranges**\\n\"\n]",
              "code": "// https://on.cypress.io/select\n// at first, no option should be selected\ncy.get('.action-select')\n    .should('have.value', '--Select a fruit--');\n// Select option(s) with matching text content\ncy.get('.action-select').select('apples');\n// confirm the apples were selected\n// note that each value starts with \"fr-\" in our HTML\ncy.get('.action-select').should('have.value', 'fr-apples');\ncy.get('.action-select-multiple')\n    .select(['apples', 'oranges', 'bananas'])\n    // when getting multiple values, invoke \"val\" method first\n    .invoke('val')\n    .should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']);\n// Select option(s) with matching value\ncy.get('.action-select').select('fr-bananas')\n    // can attach an assertion right away to the element\n    .should('have.value', 'fr-bananas');\ncy.get('.action-select-multiple')\n    .select(['fr-apples', 'fr-oranges', 'fr-bananas'])\n    .invoke('val')\n    .should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']);\n// assert the selected values include oranges\ncy.get('.action-select-multiple')\n    .invoke('val').should('include', 'fr-oranges');",
              "err": {},
              "uuid": "8fa0dff4-c2fd-4094-bdb3-9936bd9c42d4",
              "parentUUID": "afa254ea-d9d4-40dd-9771-2193a2603b72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".scrollIntoView() - scroll an element into view",
              "fullTitle": "Actions .scrollIntoView() - scroll an element into view",
              "timedOut": null,
              "duration": 118,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      []\n    ]\n  },\n  \"        cy:command (K): visit\\thttps://example.cypress.io/commands/actions\\n        cy:command (K): get\\t#scroll-horizontal button\\n        cy:command (K): assert\\texpected **<button.btn.btn-danger>** not to be **visible**\\n        cy:command (K): get\\t#scroll-horizontal button\\n        cy:command (K): scrollIntoView\\n        cy:command (K): assert\\texpected **<button.btn.btn-danger>** to be **visible**\\n        cy:command (K): get\\t#scroll-vertical button\\n        cy:command (K): assert\\texpected **<button.btn.btn-danger>** not to be **visible**\\n        cy:command (K): get\\t#scroll-vertical button\\n        cy:command (K): scrollIntoView\\n        cy:command (K): assert\\texpected **<button.btn.btn-danger>** to be **visible**\\n        cy:command (K): get\\t#scroll-both button\\n        cy:command (K): assert\\texpected **<button.btn.btn-danger>** not to be **visible**\\n        cy:command (K): get\\t#scroll-both button\\n        cy:command (K): scrollIntoView\\n        cy:command (K): assert\\texpected **<button.btn.btn-danger>** to be **visible**\\n\"\n]",
              "code": "// https://on.cypress.io/scrollintoview\n// normally all of these buttons are hidden,\n// because they're not within\n// the viewable area of their parent\n// (we need to scroll to see them)\ncy.get('#scroll-horizontal button')\n    .should('not.be.visible');\n// scroll the button into view, as if the user had scrolled\ncy.get('#scroll-horizontal button').scrollIntoView()\n    .should('be.visible');\ncy.get('#scroll-vertical button')\n    .should('not.be.visible');\n// Cypress handles the scroll direction needed\ncy.get('#scroll-vertical button').scrollIntoView()\n    .should('be.visible');\ncy.get('#scroll-both button')\n    .should('not.be.visible');\n// Cypress knows to scroll to the right and down\ncy.get('#scroll-both button').scrollIntoView()\n    .should('be.visible');",
              "err": {},
              "uuid": "1b6f1b2d-bd23-4b65-845d-34445aaa3adc",
              "parentUUID": "afa254ea-d9d4-40dd-9771-2193a2603b72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".trigger() - trigger an event on a DOM element",
              "fullTitle": "Actions .trigger() - trigger an event on a DOM element",
              "timedOut": null,
              "duration": 122,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      []\n    ]\n  },\n  \"        cy:command (K): visit\\thttps://example.cypress.io/commands/actions\\n        cy:command (K): get\\t.trigger-input-range\\n        cy:command (K): invoke\\t.val()\\n        cy:command (K): trigger\\tchange\\n        cy:command (K): get\\tinput[type=range]\\n        cy:command (K): siblings\\tp\\n        cy:command (K): assert\\texpected **<p>** to have text **'25'**\\n                        Actual: \\t\\\"25\\\"\\n                        Expected: \\t\\\"25\\\"\\n\"\n]",
              "code": "// https://on.cypress.io/trigger\n// To interact with a range input (slider)\n// we need to set its value & trigger the\n// event to signal it changed\n// Here, we invoke jQuery's val() method to set\n// the value and trigger the 'change' event\ncy.get('.trigger-input-range')\n    .invoke('val', 25)\n    .trigger('change')\n    .get('input[type=range]').siblings('p')\n    .should('have.text', '25');",
              "err": {},
              "uuid": "a6dc2133-bcb5-4fb7-90fc-f7ffb4035d2a",
              "parentUUID": "afa254ea-d9d4-40dd-9771-2193a2603b72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.scrollTo() - scroll the window or element to a position",
              "fullTitle": "Actions cy.scrollTo() - scroll the window or element to a position",
              "timedOut": null,
              "duration": 2107,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      []\n    ]\n  },\n  \"        cy:command (K): visit\\thttps://example.cypress.io/commands/actions\\n        cy:command (K): scrollTo\\tbottom\\n        cy:command (K): get\\t#scrollable-horizontal\\n        cy:command (K): scrollTo\\tright\\n        cy:command (K): get\\t#scrollable-vertical\\n        cy:command (K): scrollTo\\t250, 250\\n        cy:command (K): get\\t#scrollable-both\\n        cy:command (K): scrollTo\\t75%, 25%\\n        cy:command (K): get\\t#scrollable-vertical\\n        cy:command (K): scrollTo\\tcenter, {easing: linear}\\n        cy:command (K): get\\t#scrollable-both\\n        cy:command (K): scrollTo\\tcenter, {duration: 2000}\\n\"\n]",
              "code": "// https://on.cypress.io/scrollto\n// You can scroll to 9 specific positions of an element:\n//  -----------------------------------\n// | topLeft        top       topRight |\n// |                                   |\n// |                                   |\n// |                                   |\n// | left          center        right |\n// |                                   |\n// |                                   |\n// |                                   |\n// | bottomLeft   bottom   bottomRight |\n//  -----------------------------------\n// if you chain .scrollTo() off of cy, we will\n// scroll the entire window\ncy.scrollTo('bottom');\ncy.get('#scrollable-horizontal').scrollTo('right');\n// or you can scroll to a specific coordinate:\n// (x axis, y axis) in pixels\ncy.get('#scrollable-vertical').scrollTo(250, 250);\n// or you can scroll to a specific percentage\n// of the (width, height) of the element\ncy.get('#scrollable-both').scrollTo('75%', '25%');\n// control the easing of the scroll (default is 'swing')\ncy.get('#scrollable-vertical').scrollTo('center', { easing: 'linear' });\n// control the duration of the scroll (in ms)\ncy.get('#scrollable-both').scrollTo('center', { duration: 2000 });",
              "err": {},
              "uuid": "225d70a6-6bfb-4d5a-aa30-51f74aec2a29",
              "parentUUID": "afa254ea-d9d4-40dd-9771-2193a2603b72",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cec31abc-d785-4289-8adc-d4379860f126",
            "0cdeb7be-37a8-4332-8bd4-d5f0bd884c58",
            "71ac6629-c104-4342-b156-ef6c350b5b1e",
            "a606ef93-70a7-48cb-9061-ca9a134c95f2",
            "56800fac-6849-45c1-b9ff-61f00a87013d",
            "3bae92a1-9b73-4f8c-bd30-b7f839967170",
            "edb0356c-ccc1-45a0-b43a-537089861a50",
            "7edb22aa-867a-477e-9943-1260d943ab1e",
            "2f6369f2-8ad9-4043-b8c0-5ffa850849e1",
            "40f7cf2e-95bd-4542-af24-b9748cc5171c",
            "8fa0dff4-c2fd-4094-bdb3-9936bd9c42d4",
            "1b6f1b2d-bd23-4b65-845d-34445aaa3adc",
            "a6dc2133-bcb5-4fb7-90fc-f7ffb4035d2a",
            "225d70a6-6bfb-4d5a-aa30-51f74aec2a29"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13104,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "overwrite": false,
        "html": false,
        "json": true,
        "reportDir": "cypress/reports/html/.jsons"
      },
      "version": "6.2.0"
    }
  }
}