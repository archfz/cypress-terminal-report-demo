{
  "stats": {
    "suites": 3,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2024-02-07T16:42:39.552Z",
    "end": "2024-02-07T16:42:44.578Z",
    "duration": 5026,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e8ad3580-7619-4315-aa32-27514e0cc277",
      "title": "",
      "fullFile": "cypress/integration/assertions.cy.ts",
      "file": "cypress/integration/assertions.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "685f5bf3-5d58-4b37-8bb9-5932c96992ad",
          "title": "Assertions",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f2fdbcf3-44e7-4db9-b5bc-d8adda2e2f72",
              "title": "Implicit Assertions",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".should() - make an assertion about the current subject",
                  "fullTitle": "Assertions Implicit Assertions .should() - make an assertion about the current subject",
                  "timedOut": null,
                  "duration": 322,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      []\n    ]\n  },\n  \"        cy:command (K): visit\\thttps://example.cypress.io/commands/assertions\\n        cy:command (K): get\\t.assertion-table\\n        cy:command (K): find\\ttbody tr:last\\n        cy:command (K): assert\\texpected **<tr.success>** to have class **success**\\n        cy:command (K): find\\ttd\\n        cy:command (K): first\\n        cy:command (K): assert\\texpected **<td>** to have text **Column content**\\n                        Actual: \\t\\\"Column content\\\"\\n                        Expected: \\t\\\"Column content\\\"\\n        cy:command (K): assert\\texpected **<td>** to contain **Column content**\\n        cy:command (K): assert\\texpected **<td>** to have HTML **Column content**\\n                        Actual: \\t\\\"Column content\\\"\\n                        Expected: \\t\\\"Column content\\\"\\n        cy:command (K): assert\\texpected **<td>** to match **td**\\n        cy:command (K): invoke\\t.text()\\n        cy:command (K): assert\\texpected **Column content** to match /column content/i\\n        cy:command (K): get\\t.assertion-table\\n        cy:command (K): find\\ttbody tr:last\\n        cy:command (K): contains\\ttd, /column content/i\\n        cy:command (K): assert\\texpected **<td>** to be **visible**\\n\"\n]",
                  "code": "// https://on.cypress.io/should\ncy.get('.assertion-table')\n    .find('tbody tr:last')\n    .should('have.class', 'success')\n    .find('td')\n    .first()\n    // checking the text of the <td> element in various ways\n    .should('have.text', 'Column content')\n    .should('contain', 'Column content')\n    .should('have.html', 'Column content')\n    // chai-jquery uses \"is()\" to check if element matches selector\n    .should('match', 'td')\n    // to match text content against a regular expression\n    // first need to invoke jQuery method text()\n    // and then match using regular expression\n    .invoke('text')\n    .should('match', /column content/i);\n// a better way to check element's text content against a regular expression\n// is to use \"cy.contains\"\n// https://on.cypress.io/contains\ncy.get('.assertion-table')\n    .find('tbody tr:last')\n    // finds first <td> element with text content matching regular expression\n    .contains('td', /column content/i)\n    .should('be.visible');\n// for more information about asserting element's text\n// see https://on.cypress.io/using-cypress-faq#How-do-I-get-an-elementâ€™s-text-contents",
                  "err": {},
                  "uuid": "74be4626-8ce1-4645-aa81-534306051470",
                  "parentUUID": "f2fdbcf3-44e7-4db9-b5bc-d8adda2e2f72",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": ".and() - chain multiple assertions together",
                  "fullTitle": "Assertions Implicit Assertions .and() - chain multiple assertions together",
                  "timedOut": null,
                  "duration": 102,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      []\n    ]\n  },\n  \"        cy:command (K): visit\\thttps://example.cypress.io/commands/assertions\\n        cy:command (K): get\\t.assertions-link\\n        cy:command (K): assert\\texpected **<a.assertions-link.active>** to have class **active**\\n        cy:command (K): assert\\texpected **<a.assertions-link.active>** to have attribute **href**\\n        cy:command (K): assert\\texpected **https://on.cypress.io** to include **cypress.io**\\n\"\n]",
                  "code": "// https://on.cypress.io/and\ncy.get('.assertions-link')\n    .should('have.class', 'active')\n    .and('have.attr', 'href')\n    .and('include', 'cypress.io');",
                  "err": {},
                  "uuid": "13eca678-e869-493b-8b41-f9f35977e526",
                  "parentUUID": "f2fdbcf3-44e7-4db9-b5bc-d8adda2e2f72",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "74be4626-8ce1-4645-aa81-534306051470",
                "13eca678-e869-493b-8b41-f9f35977e526"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 424,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "198b8410-ff25-47f4-a0f3-1b3dd33f0308",
              "title": "Explicit Assertions",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "expect - make an assertion about a specified subject",
                  "fullTitle": "Assertions Explicit Assertions expect - make an assertion about a specified subject",
                  "timedOut": null,
                  "duration": 112,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      []\n    ]\n  },\n  \"        cy:command (K): visit\\thttps://example.cypress.io/commands/assertions\\n        cy:command (K): assert\\texpected **true** to be true\\n                        Actual: \\ttrue\\n                        Expected: \\ttrue\\n        cy:command (K): assert\\texpected **{ foo: bar }** to equal **{ foo: bar }**\\n                        Actual: \\t{\\\"foo\\\":\\\"bar\\\"}\\n                        Expected: \\t{\\\"foo\\\":\\\"bar\\\"}\\n        cy:command (K): assert\\texpected **{ foo: bar }** to deeply equal **{ foo: bar }**\\n                        Actual: \\t{\\\"foo\\\":\\\"bar\\\"}\\n                        Expected: \\t{\\\"foo\\\":\\\"bar\\\"}\\n        cy:command (K): assert\\texpected **FooBar** to match /bar$/i\\n\"\n]",
                  "code": "// We can use Chai's BDD style assertions\nexpect(true).to.be.true;\nvar o = { foo: 'bar' };\nexpect(o).to.equal(o);\nexpect(o).to.deep.equal({ foo: 'bar' });\n// matching text using regular expression\nexpect('FooBar').to.match(/bar$/i);",
                  "err": {},
                  "uuid": "49e9fd72-cafd-43fb-9113-c82937c7463c",
                  "parentUUID": "198b8410-ff25-47f4-a0f3-1b3dd33f0308",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "pass your own callback function to should()",
                  "fullTitle": "Assertions Explicit Assertions pass your own callback function to should()",
                  "timedOut": null,
                  "duration": 97,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      []\n    ]\n  },\n  \"        cy:command (K): visit\\thttps://example.cypress.io/commands/assertions\\n        cy:command (K): get\\t.assertions-p\\n        cy:command (K): find\\tp\\n        cy:command (K): assert\\thas 3 paragraphs: expected **[ Array(3) ]** to have property **length**\\n        cy:command (K): assert\\thas 3 paragraphs: expected **[ Array(3) ]** to have a length of **3**\\n                        Actual: \\t3\\n                        Expected: \\t3\\n        cy:command (K): assert\\thas expected text in each paragraph: expected **[ Array(3) ]** to deeply equal **[ Array(3) ]**\\n                        Actual: \\t[\\\"Some text from first p\\\",\\\"More text from second p\\\",\\\"And even more text from third p\\\"]\\n                        Expected: \\t[\\\"Some text from first p\\\",\\\"More text from second p\\\",\\\"And even more text from third p\\\"]\\n\"\n]",
                  "code": "// Pass a function to should that can have any number\n// of explicit assertions within it.\n// The \".should(cb)\" function will be retried\n// automatically until it passes all your explicit assertions or times out.\ncy.get('.assertions-p')\n    .find('p')\n    .should(function ($p) {\n    // https://on.cypress.io/$\n    // return an array of texts from all of the p's\n    var texts = $p.map(function (i, el) { return Cypress.$(el).text(); });\n    // jquery map returns jquery object\n    // and .get() convert this to simple array\n    var paragraphs = texts.get();\n    // array should have length of 3\n    expect(paragraphs, 'has 3 paragraphs').to.have.length(3);\n    // use second argument to expect(...) to provide clear\n    // message with each assertion\n    expect(paragraphs, 'has expected text in each paragraph').to.deep.eq([\n        'Some text from first p',\n        'More text from second p',\n        'And even more text from third p',\n    ]);\n});",
                  "err": {},
                  "uuid": "6ad4718f-860a-4bf8-8f65-4b2adca1d976",
                  "parentUUID": "198b8410-ff25-47f4-a0f3-1b3dd33f0308",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "finds element by class name regex",
                  "fullTitle": "Assertions Explicit Assertions finds element by class name regex",
                  "timedOut": null,
                  "duration": 94,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      []\n    ]\n  },\n  \"        cy:command (K): visit\\thttps://example.cypress.io/commands/assertions\\n        cy:command (K): get\\t.docs-header\\n        cy:command (K): find\\tdiv\\n        cy:command (K): assert\\texpected **<div.main-abc123.heading-xyz987>** to have a length of **1**\\n                        Actual: \\t1\\n                        Expected: \\t1\\n        cy:command (K): assert\\texpected **main-abc123 heading-xyz987** to match /heading-/\\n        cy:command (K): assert\\ttext content: expected **<div.main-abc123.heading-xyz987>** to have text **Introduction**\\n                        Actual: \\t\\\"Introduction\\\"\\n                        Expected: \\t\\\"Introduction\\\"\\n\"\n]",
                  "code": "cy.get('.docs-header')\n    .find('div')\n    // .should(cb) callback function will be retried\n    .should(function ($div) {\n    expect($div).to.have.length(1);\n    var className = $div[0].className;\n    expect(className).to.match(/heading-/);\n})\n    // .then(cb) callback is not retried,\n    // it either passes or fails\n    .then(function ($div) {\n    expect($div, 'text content').to.have.text('Introduction');\n});",
                  "err": {},
                  "uuid": "9e49290d-e257-4149-9755-8fd754c20ef1",
                  "parentUUID": "198b8410-ff25-47f4-a0f3-1b3dd33f0308",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can throw any error",
                  "fullTitle": "Assertions Explicit Assertions can throw any error",
                  "timedOut": null,
                  "duration": 101,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      []\n    ]\n  },\n  \"        cy:command (K): visit\\thttps://example.cypress.io/commands/assertions\\n        cy:command (K): get\\t.docs-header\\n        cy:command (K): find\\tdiv\\n\"\n]",
                  "code": "cy.get('.docs-header')\n    .find('div')\n    .should(function ($div) {\n    if ($div.length !== 1) {\n        // you can throw your own errors\n        throw new Error('Did not find 1 element');\n    }\n    var className = $div[0].className;\n    if (!className.match(/heading-/)) {\n        throw new Error(\"Could not find class \\\"heading-\\\" in \".concat(className));\n    }\n});",
                  "err": {},
                  "uuid": "53238265-fa37-4f74-9cd2-a26e5465659b",
                  "parentUUID": "198b8410-ff25-47f4-a0f3-1b3dd33f0308",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "matches unknown text between two elements",
                  "fullTitle": "Assertions Explicit Assertions matches unknown text between two elements",
                  "timedOut": null,
                  "duration": 138,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      []\n    ]\n  },\n  \"        cy:command (K): visit\\thttps://example.cypress.io/commands/assertions\\n        cy:command (K): get\\t.two-elements\\n        cy:command (K): find\\t.first\\n        cy:command (K): get\\t.two-elements\\n        cy:command (K): find\\t.second\\n        cy:command (K): assert\\tsecond text: expected **foobar** to equal **foobar**\\n                        Actual: \\t\\\"foobar\\\"\\n                        Expected: \\t\\\"foobar\\\"\\n\"\n]",
                  "code": "/**\n * Text from the first element.\n * @type {string}\n*/\nvar text;\n/**\n * Normalizes passed text,\n * useful before comparing text with spaces and different capitalization.\n * @param {string} s Text to normalize\n*/\nvar normalizeText = function (s) { return s.replace(/\\s/g, '').toLowerCase(); };\ncy.get('.two-elements')\n    .find('.first')\n    .then(function ($first) {\n    // save text from the first element\n    text = normalizeText($first.text());\n});\ncy.get('.two-elements')\n    .find('.second')\n    .should(function ($div) {\n    // we can massage text before comparing\n    var secondText = normalizeText($div.text());\n    expect(secondText, 'second text').to.equal(text);\n});",
                  "err": {},
                  "uuid": "2fe14622-bfea-4cdf-aab6-a1200f32cb47",
                  "parentUUID": "198b8410-ff25-47f4-a0f3-1b3dd33f0308",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "assert - assert shape of an object",
                  "fullTitle": "Assertions Explicit Assertions assert - assert shape of an object",
                  "timedOut": null,
                  "duration": 97,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      []\n    ]\n  },\n  \"        cy:command (K): visit\\thttps://example.cypress.io/commands/assertions\\n        cy:command (K): assert\\tvalue is object: expected **{ name: Joe, age: 20 }** to be an object\\n\"\n]",
                  "code": "var person = {\n    name: 'Joe',\n    age: 20,\n};\nassert.isObject(person, 'value is object');",
                  "err": {},
                  "uuid": "9af53795-875d-4dc7-81c8-5382910e8cbc",
                  "parentUUID": "198b8410-ff25-47f4-a0f3-1b3dd33f0308",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retries the should callback until assertions pass",
                  "fullTitle": "Assertions Explicit Assertions retries the should callback until assertions pass",
                  "timedOut": null,
                  "duration": 1623,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      []\n    ]\n  },\n  \"        cy:command (K): visit\\thttps://example.cypress.io/commands/assertions\\n        cy:command (K): get\\t#random-number\\n        cy:command (K): assert\\texpected **3** to be at least **1**\\n                        Actual: \\t3\\n                        Expected: \\t1\\n        cy:command (K): assert\\texpected **3** to be at most **10**\\n                        Actual: \\t3\\n                        Expected: \\t10\\n\"\n]",
                  "code": "cy.get('#random-number')\n    .should(function ($div) {\n    var n = parseFloat($div.text());\n    expect(n).to.be.gte(1).and.be.lte(10);\n});",
                  "err": {},
                  "uuid": "a7d315e7-1fc4-4bf7-86de-a90b971f85fd",
                  "parentUUID": "198b8410-ff25-47f4-a0f3-1b3dd33f0308",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "49e9fd72-cafd-43fb-9113-c82937c7463c",
                "6ad4718f-860a-4bf8-8f65-4b2adca1d976",
                "9e49290d-e257-4149-9755-8fd754c20ef1",
                "53238265-fa37-4f74-9cd2-a26e5465659b",
                "2fe14622-bfea-4cdf-aab6-a1200f32cb47",
                "9af53795-875d-4dc7-81c8-5382910e8cbc",
                "a7d315e7-1fc4-4bf7-86de-a90b971f85fd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2262,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "configFile": "/home/archy/projects/cypress-terminal-report-demo/multi-reporter-config.json",
        "overwrite": false,
        "html": false,
        "json": true,
        "reportDir": "cypress/reports/html/.jsons"
      },
      "version": "6.2.0"
    }
  }
}